#!/usr/bin/env python3

import argparse
import enum
import os
import subprocess
import sys
from gi.repository import Gio, GLib, GObject


class BoostTunable(enum.Enum):

    AMD = '/sys/devices/system/cpu/cpufreq/boost'
    INTEL = '/sys/devices/system/cpu/intel_pstate/no_turbo'

    @classmethod
    def detect_platform(cls):
        for member in cls:
            if os.path.isfile(member.value):
                return member

        raise RuntimeError('Unable to determine current platform')

    @property
    def inverted(self):
        match self:
            case self.AMD: return False
            case self.INTEL: return True
            case _: raise RuntimeError('Unknown error')


class BoostProfile:

    BOOST_TUNABLE = None
    BOOST_PROFILES = None
    POWER_PROFILE_CLASS = None

    @classmethod
    def init(cls, profiles, boost_profiles):
        cls.POWER_PROFILE_CLASS = enum.Enum(
            'PowerProfile',
            {profile['Profile'].replace('-', '').upper(): profile['Profile'] for profile in profiles},
        )

        cls.BOOST_TUNABLE = BoostTunable.detect_platform()
        cls.BOOST_PROFILES = [cls.POWER_PROFILE_CLASS(profile) for profile in boost_profiles]

    def __init__(self, profile_name):
        self.power_profile = self.POWER_PROFILE_CLASS(profile_name)

    @property
    def boost(self):
        return self.power_profile in self.BOOST_PROFILES

    def apply(self):
        tunable = self.BOOST_TUNABLE
        value = int(self.boost ^ tunable.inverted)

        with open(tunable.value, 'w') as f:
            f.write(str(value))

        if self.boost:
            subprocess.run(['gnome-randr', 'modify', 'eDP-1', '-m', '2880x1920@120.000+vrr'])
        else:
            subprocess.run(['gnome-randr', 'modify', 'eDP-1', '-m', '2880x1920@60.001+vrr'])


def on_changed_props(proxy, changed_props, invalidated_props):
    if not dict(changed_props).get('ActiveProfile'):
        return

    BoostProfile(changed_props['ActiveProfile']).apply()


def parse_args():
    args = argparse.ArgumentParser()

    args.add_argument(
        '--boost-profiles',
        nargs='+',
        default=['balanced', 'performance'],
        help='Power profiles for which boost should be enabled',
    )

    return args.parse_args()


def main(args):
    proxy = Gio.DBusProxy.new_sync(
        Gio.bus_get_sync(Gio.BusType.SYSTEM, None),
        Gio.DBusProxyFlags.NONE,
        None,
        'net.hadess.PowerProfiles',
        '/net/hadess/PowerProfiles',
        'net.hadess.PowerProfiles',
        None,
    )

    profiles = proxy.get_cached_property('Profiles').unpack()
    BoostProfile.init(profiles, args.boost_profiles)
    proxy.connect('g-properties-changed', on_changed_props)

    # Set boost based on current power profile
    BoostProfile(
        proxy.get_cached_property('ActiveProfile').unpack()
    ).apply()

    return GLib.MainLoop().run()


if __name__ == '__main__':
    result = False

    args = parse_args()

    try:
        result = main(args)
    except KeyboardInterrupt:
        pass

    sys.exit(0 if result else 1)
